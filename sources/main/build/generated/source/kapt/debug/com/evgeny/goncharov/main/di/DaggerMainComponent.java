// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.main.di;

import com.evgeny.goncharov.coreapi.database.DatabaseContract;
import com.evgeny.goncharov.coreapi.database.dao.CatDescriptionDAO;
import com.evgeny.goncharov.coreapi.database.dao.CatsWallDao;
import com.evgeny.goncharov.coreapi.managers.LanguageManager;
import com.evgeny.goncharov.coreapi.managers.ThemeManager;
import com.evgeny.goncharov.coreapi.mediators.SearchCatsMediator;
import com.evgeny.goncharov.coreapi.mediators.SettingsMediator;
import com.evgeny.goncharov.coreapi.mediators.SplashScreenMediator;
import com.evgeny.goncharov.coreapi.mediators.WallCatsMediator;
import com.evgeny.goncharov.coreapi.providers.ProviderFacade;
import com.evgeny.goncharov.coreapi.rest.ApiCatSearch;
import com.evgeny.goncharov.main.MainActivity;
import com.evgeny.goncharov.main.MainActivity_MembersInjector;
import dagger.internal.Preconditions;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMainComponent implements MainComponent {
  private final ProviderFacade providerFacade;

  private DaggerMainComponent(ProviderFacade providerFacadeParam) {
    this.providerFacade = providerFacadeParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public SearchCatsMediator provideSearchCatsMediator() {
    return Preconditions.checkNotNull(providerFacade.provideSearchCatsMediator(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public SplashScreenMediator provideSplashScreenMediator() {
    return Preconditions.checkNotNull(providerFacade.provideSplashScreenMediator(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public WallCatsMediator provideWallCatsMediator() {
    return Preconditions.checkNotNull(providerFacade.provideWallCatsMediator(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public SettingsMediator provideSettingMediator() {
    return Preconditions.checkNotNull(providerFacade.provideSettingMediator(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public DatabaseContract provideDatabase() {
    return Preconditions.checkNotNull(providerFacade.provideDatabase(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public CatsWallDao provideCatsWallDao() {
    return Preconditions.checkNotNull(providerFacade.provideCatsWallDao(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public CatDescriptionDAO provideCatDescriptionDAO() {
    return Preconditions.checkNotNull(providerFacade.provideCatDescriptionDAO(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public Retrofit provideRetrofit() {
    return Preconditions.checkNotNull(providerFacade.provideRetrofit(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public ApiCatSearch provideApiCatSearch() {
    return Preconditions.checkNotNull(providerFacade.provideApiCatSearch(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public LanguageManager provideLanguageManager() {
    return Preconditions.checkNotNull(providerFacade.provideLanguageManager(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public ThemeManager provideThemeManager() {
    return Preconditions.checkNotNull(providerFacade.provideThemeManager(), "Cannot return null from a non-@Nullable component method");}

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectThemeManager(instance, Preconditions.checkNotNull(providerFacade.provideThemeManager(), "Cannot return null from a non-@Nullable component method"));
    MainActivity_MembersInjector.injectLanguageManager(instance, Preconditions.checkNotNull(providerFacade.provideLanguageManager(), "Cannot return null from a non-@Nullable component method"));
    MainActivity_MembersInjector.injectSplashScreenMediator(instance, Preconditions.checkNotNull(providerFacade.provideSplashScreenMediator(), "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private ProviderFacade providerFacade;

    private Builder() {
    }

    public Builder providerFacade(ProviderFacade providerFacade) {
      this.providerFacade = Preconditions.checkNotNull(providerFacade);
      return this;
    }

    public MainComponent build() {
      Preconditions.checkBuilderRequirement(providerFacade, ProviderFacade.class);
      return new DaggerMainComponent(providerFacade);
    }
  }
}
