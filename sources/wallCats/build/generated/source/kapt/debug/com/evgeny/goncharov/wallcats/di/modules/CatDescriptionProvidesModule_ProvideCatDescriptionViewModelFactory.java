// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.wallcats.di.modules;

import com.evgeny.goncharov.wallcats.ui.CatDescriptionFragment;
import com.evgeny.goncharov.wallcats.view.model.CatDescriptionViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CatDescriptionProvidesModule_ProvideCatDescriptionViewModelFactory implements Factory<CatDescriptionViewModel> {
  private final Provider<CatDescriptionFragment> fragmentProvider;

  public CatDescriptionProvidesModule_ProvideCatDescriptionViewModelFactory(
      Provider<CatDescriptionFragment> fragmentProvider) {
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public CatDescriptionViewModel get() {
    return provideCatDescriptionViewModel(fragmentProvider.get());
  }

  public static CatDescriptionProvidesModule_ProvideCatDescriptionViewModelFactory create(
      Provider<CatDescriptionFragment> fragmentProvider) {
    return new CatDescriptionProvidesModule_ProvideCatDescriptionViewModelFactory(fragmentProvider);
  }

  public static CatDescriptionViewModel provideCatDescriptionViewModel(
      CatDescriptionFragment fragment) {
    return Preconditions.checkNotNull(CatDescriptionProvidesModule.provideCatDescriptionViewModel(fragment), "Cannot return null from a non-@Nullable @Provides method");
  }
}
