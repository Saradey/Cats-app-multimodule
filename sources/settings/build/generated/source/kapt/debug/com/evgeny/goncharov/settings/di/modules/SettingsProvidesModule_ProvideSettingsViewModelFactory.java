// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.settings.di.modules;

import com.evgeny.goncharov.settings.ui.SettingsFragment;
import com.evgeny.goncharov.settings.view.model.SettingsViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SettingsProvidesModule_ProvideSettingsViewModelFactory implements Factory<SettingsViewModel> {
  private final Provider<SettingsFragment> fragmentProvider;

  public SettingsProvidesModule_ProvideSettingsViewModelFactory(
      Provider<SettingsFragment> fragmentProvider) {
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public SettingsViewModel get() {
    return provideSettingsViewModel(fragmentProvider.get());
  }

  public static SettingsProvidesModule_ProvideSettingsViewModelFactory create(
      Provider<SettingsFragment> fragmentProvider) {
    return new SettingsProvidesModule_ProvideSettingsViewModelFactory(fragmentProvider);
  }

  public static SettingsViewModel provideSettingsViewModel(SettingsFragment fragment) {
    return Preconditions.checkNotNull(SettingsProvidesModule.provideSettingsViewModel(fragment), "Cannot return null from a non-@Nullable @Provides method");
  }
}
