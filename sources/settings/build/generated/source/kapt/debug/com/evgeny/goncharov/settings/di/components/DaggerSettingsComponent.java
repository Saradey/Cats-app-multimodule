// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.settings.di.components;

import com.evgeny.goncharov.coreapi.providers.ManagerProvider;
import com.evgeny.goncharov.settings.di.modules.SettingsProvidesModule_ProvideSettingsViewModelFactory;
import com.evgeny.goncharov.settings.gateway.SettingsGatewayImpl;
import com.evgeny.goncharov.settings.interactor.SettingsInteractorImpl;
import com.evgeny.goncharov.settings.ui.DialogChooseLanguageApp;
import com.evgeny.goncharov.settings.ui.DialogChooseLanguageApp_MembersInjector;
import com.evgeny.goncharov.settings.ui.DialogChooseThemeApp;
import com.evgeny.goncharov.settings.ui.DialogChooseThemeApp_MembersInjector;
import com.evgeny.goncharov.settings.ui.SettingsFragment;
import com.evgeny.goncharov.settings.ui.SettingsFragment_MembersInjector;
import com.evgeny.goncharov.settings.view.model.SettingsViewModel;
import com.evgeny.goncharov.settings.view.model.SettingsViewModelImpl;
import com.evgeny.goncharov.settings.view.model.SettingsViewModelImpl_MembersInjector;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSettingsComponent implements SettingsComponent {
  private final SettingsFragment fragment;

  private final ManagerProvider managerProvider;

  private DaggerSettingsComponent(ManagerProvider managerProviderParam,
      SettingsFragment fragmentParam) {
    this.fragment = fragmentParam;
    this.managerProvider = managerProviderParam;
  }

  public static SettingsComponent.Factory factory() {
    return new Factory();
  }

  private SettingsViewModel getSettingsViewModel() {
    return SettingsProvidesModule_ProvideSettingsViewModelFactory.provideSettingsViewModel(fragment);}

  private SettingsGatewayImpl getSettingsGatewayImpl() {
    return new SettingsGatewayImpl(Preconditions.checkNotNull(managerProvider.provideThemeManager(), "Cannot return null from a non-@Nullable component method"), Preconditions.checkNotNull(managerProvider.provideLanguageManager(), "Cannot return null from a non-@Nullable component method"));}

  private SettingsInteractorImpl getSettingsInteractorImpl() {
    return new SettingsInteractorImpl(getSettingsGatewayImpl());}

  @Override
  public void inject(SettingsFragment fragment) {
    injectSettingsFragment(fragment);}

  @Override
  public void inject(SettingsViewModelImpl viewModel) {
    injectSettingsViewModelImpl(viewModel);}

  @Override
  public void inject(DialogChooseThemeApp viewModel) {
    injectDialogChooseThemeApp(viewModel);}

  @Override
  public void inject(DialogChooseLanguageApp viewModel) {
    injectDialogChooseLanguageApp(viewModel);}

  private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
    SettingsFragment_MembersInjector.injectViewModel(instance, getSettingsViewModel());
    return instance;
  }

  private SettingsViewModelImpl injectSettingsViewModelImpl(SettingsViewModelImpl instance) {
    SettingsViewModelImpl_MembersInjector.injectInteractor(instance, getSettingsInteractorImpl());
    return instance;
  }

  private DialogChooseThemeApp injectDialogChooseThemeApp(DialogChooseThemeApp instance) {
    DialogChooseThemeApp_MembersInjector.injectVm(instance, getSettingsViewModel());
    return instance;
  }

  private DialogChooseLanguageApp injectDialogChooseLanguageApp(DialogChooseLanguageApp instance) {
    DialogChooseLanguageApp_MembersInjector.injectVm(instance, getSettingsViewModel());
    return instance;
  }

  private static final class Factory implements SettingsComponent.Factory {
    @Override
    public SettingsComponent plus(SettingsFragment fragment, ManagerProvider provider) {
      Preconditions.checkNotNull(fragment);
      Preconditions.checkNotNull(provider);
      return new DaggerSettingsComponent(provider, fragment);
    }
  }
}
