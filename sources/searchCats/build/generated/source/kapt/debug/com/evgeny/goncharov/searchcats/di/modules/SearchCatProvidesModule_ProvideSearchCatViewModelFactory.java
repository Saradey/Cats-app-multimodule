// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.searchcats.di.modules;

import com.evgeny.goncharov.searchcats.ui.SearchCatFragment;
import com.evgeny.goncharov.searchcats.view.model.SearchCatViewModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SearchCatProvidesModule_ProvideSearchCatViewModelFactory implements Factory<SearchCatViewModel> {
  private final Provider<SearchCatFragment> fragmentProvider;

  public SearchCatProvidesModule_ProvideSearchCatViewModelFactory(
      Provider<SearchCatFragment> fragmentProvider) {
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public SearchCatViewModel get() {
    return provideSearchCatViewModel(fragmentProvider.get());
  }

  public static SearchCatProvidesModule_ProvideSearchCatViewModelFactory create(
      Provider<SearchCatFragment> fragmentProvider) {
    return new SearchCatProvidesModule_ProvideSearchCatViewModelFactory(fragmentProvider);
  }

  public static SearchCatViewModel provideSearchCatViewModel(SearchCatFragment fragment) {
    return Preconditions.checkNotNull(SearchCatProvidesModule.provideSearchCatViewModel(fragment), "Cannot return null from a non-@Nullable @Provides method");
  }
}
