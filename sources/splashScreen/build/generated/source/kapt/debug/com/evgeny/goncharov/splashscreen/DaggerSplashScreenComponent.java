// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.splashscreen;

import com.evgeny.goncharov.coreapi.providers.MediatorsProvider;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerSplashScreenComponent implements SplashScreenComponent {
  private final MediatorsProvider mediatorsProvider;

  private DaggerSplashScreenComponent(MediatorsProvider mediatorsProviderParam) {
    this.mediatorsProvider = mediatorsProviderParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public void inject(SplashScreenFragment fragment) {
    injectSplashScreenFragment(fragment);}

  private SplashScreenFragment injectSplashScreenFragment(SplashScreenFragment instance) {
    SplashScreenFragment_MembersInjector.injectWallCatsMediator(instance, Preconditions.checkNotNull(mediatorsProvider.provideWallCatsMediator(), "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private MediatorsProvider mediatorsProvider;

    private Builder() {
    }

    public Builder mediatorsProvider(MediatorsProvider mediatorsProvider) {
      this.mediatorsProvider = Preconditions.checkNotNull(mediatorsProvider);
      return this;
    }

    public SplashScreenComponent build() {
      Preconditions.checkBuilderRequirement(mediatorsProvider, MediatorsProvider.class);
      return new DaggerSplashScreenComponent(mediatorsProvider);
    }
  }
}
