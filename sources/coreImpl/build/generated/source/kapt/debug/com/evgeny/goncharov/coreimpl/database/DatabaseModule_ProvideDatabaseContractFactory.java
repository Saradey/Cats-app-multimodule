// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.coreimpl.database;

import android.content.Context;
import com.evgeny.goncharov.coreapi.database.DatabaseContract;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideDatabaseContractFactory implements Factory<DatabaseContract> {
  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideDatabaseContractFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public DatabaseContract get() {
    return provideDatabaseContract(contextProvider.get());
  }

  public static DatabaseModule_ProvideDatabaseContractFactory create(
      Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideDatabaseContractFactory(contextProvider);
  }

  public static DatabaseContract provideDatabaseContract(Context context) {
    return Preconditions.checkNotNull(DatabaseModule.provideDatabaseContract(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
