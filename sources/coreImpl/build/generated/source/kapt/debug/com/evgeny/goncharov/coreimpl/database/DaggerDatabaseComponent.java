// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.coreimpl.database;

import android.content.Context;
import com.evgeny.goncharov.coreapi.database.DatabaseContract;
import com.evgeny.goncharov.coreapi.database.dao.CatDescriptionDAO;
import com.evgeny.goncharov.coreapi.database.dao.CatsWallDao;
import com.evgeny.goncharov.coreapi.providers.ContextProvider;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerDatabaseComponent implements DatabaseComponent {
  private Provider<Context> provideContextProvider;

  private Provider<DatabaseContract> provideDatabaseContractProvider;

  private Provider<CatsWallDao> provideCatsWallDaoProvider;

  private Provider<CatDescriptionDAO> provideCatDescriptionDAOProvider;

  private DaggerDatabaseComponent(ContextProvider contextProviderParam) {

    initialize(contextProviderParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ContextProvider contextProviderParam) {
    this.provideContextProvider = new com_evgeny_goncharov_coreapi_providers_ContextProvider_provideContext(contextProviderParam);
    this.provideDatabaseContractProvider = DoubleCheck.provider(DatabaseModule_ProvideDatabaseContractFactory.create(provideContextProvider));
    this.provideCatsWallDaoProvider = SingleCheck.provider(DatabaseModule_ProvideCatsWallDaoFactory.create(provideDatabaseContractProvider));
    this.provideCatDescriptionDAOProvider = SingleCheck.provider(DatabaseModule_ProvideCatDescriptionDAOFactory.create(provideDatabaseContractProvider));
  }

  @Override
  public DatabaseContract provideDatabase() {
    return provideDatabaseContractProvider.get();}

  @Override
  public CatsWallDao provideCatsWallDao() {
    return provideCatsWallDaoProvider.get();}

  @Override
  public CatDescriptionDAO provideCatDescriptionDAO() {
    return provideCatDescriptionDAOProvider.get();}

  public static final class Builder {
    private ContextProvider contextProvider;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder databaseModule(DatabaseModule databaseModule) {
      Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public Builder contextProvider(ContextProvider contextProvider) {
      this.contextProvider = Preconditions.checkNotNull(contextProvider);
      return this;
    }

    public DatabaseComponent build() {
      Preconditions.checkBuilderRequirement(contextProvider, ContextProvider.class);
      return new DaggerDatabaseComponent(contextProvider);
    }
  }

  private static class com_evgeny_goncharov_coreapi_providers_ContextProvider_provideContext implements Provider<Context> {
    private final ContextProvider contextProvider;

    com_evgeny_goncharov_coreapi_providers_ContextProvider_provideContext(
        ContextProvider contextProvider) {
      this.contextProvider = contextProvider;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(contextProvider.provideContext(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
