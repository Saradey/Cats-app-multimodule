// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.coreimpl.network;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideLoggingInterceptorFactory implements Factory<HttpLoggingInterceptor> {
  private final Provider<Boolean> buildVariantsProvider;

  public NetworkModule_ProvideLoggingInterceptorFactory(Provider<Boolean> buildVariantsProvider) {
    this.buildVariantsProvider = buildVariantsProvider;
  }

  @Override
  public HttpLoggingInterceptor get() {
    return provideLoggingInterceptor(buildVariantsProvider.get());
  }

  public static NetworkModule_ProvideLoggingInterceptorFactory create(
      Provider<Boolean> buildVariantsProvider) {
    return new NetworkModule_ProvideLoggingInterceptorFactory(buildVariantsProvider);
  }

  public static HttpLoggingInterceptor provideLoggingInterceptor(boolean buildVariants) {
    return Preconditions.checkNotNull(NetworkModule.provideLoggingInterceptor(buildVariants), "Cannot return null from a non-@Nullable @Provides method");
  }
}
