// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.coreimpl.database;

import com.evgeny.goncharov.coreapi.database.DatabaseContract;
import com.evgeny.goncharov.coreapi.database.dao.CatDescriptionDAO;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideCatDescriptionDAOFactory implements Factory<CatDescriptionDAO> {
  private final Provider<DatabaseContract> appDatabaseProvider;

  public DatabaseModule_ProvideCatDescriptionDAOFactory(
      Provider<DatabaseContract> appDatabaseProvider) {
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public CatDescriptionDAO get() {
    return provideCatDescriptionDAO(appDatabaseProvider.get());
  }

  public static DatabaseModule_ProvideCatDescriptionDAOFactory create(
      Provider<DatabaseContract> appDatabaseProvider) {
    return new DatabaseModule_ProvideCatDescriptionDAOFactory(appDatabaseProvider);
  }

  public static CatDescriptionDAO provideCatDescriptionDAO(DatabaseContract appDatabase) {
    return Preconditions.checkNotNull(DatabaseModule.provideCatDescriptionDAO(appDatabase), "Cannot return null from a non-@Nullable @Provides method");
  }
}
