// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.coreimpl.database;

import com.evgeny.goncharov.coreapi.database.DatabaseContract;
import com.evgeny.goncharov.coreapi.database.dao.CatsWallDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideCatsWallDaoFactory implements Factory<CatsWallDao> {
  private final Provider<DatabaseContract> appDatabaseProvider;

  public DatabaseModule_ProvideCatsWallDaoFactory(Provider<DatabaseContract> appDatabaseProvider) {
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public CatsWallDao get() {
    return provideCatsWallDao(appDatabaseProvider.get());
  }

  public static DatabaseModule_ProvideCatsWallDaoFactory create(
      Provider<DatabaseContract> appDatabaseProvider) {
    return new DatabaseModule_ProvideCatsWallDaoFactory(appDatabaseProvider);
  }

  public static CatsWallDao provideCatsWallDao(DatabaseContract appDatabase) {
    return Preconditions.checkNotNull(DatabaseModule.provideCatsWallDao(appDatabase), "Cannot return null from a non-@Nullable @Provides method");
  }
}
