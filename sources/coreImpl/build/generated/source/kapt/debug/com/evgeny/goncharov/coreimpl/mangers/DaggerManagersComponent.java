// Generated by Dagger (https://dagger.dev).
package com.evgeny.goncharov.coreimpl.mangers;

import android.content.Context;
import com.evgeny.goncharov.coreapi.managers.LanguageManager;
import com.evgeny.goncharov.coreapi.managers.ThemeManager;
import com.evgeny.goncharov.coreapi.providers.ContextProvider;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerManagersComponent implements ManagersComponent {
  private Provider<Context> provideContextProvider;

  private Provider<LanguageManagerImpl> languageManagerImplProvider;

  private Provider<LanguageManager> bindLanguageManagerProvider;

  private Provider<ThemeManagerImpl> themeManagerImplProvider;

  private Provider<ThemeManager> bindThemeManagerProvider;

  private DaggerManagersComponent(ContextProvider contextProviderParam) {

    initialize(contextProviderParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ContextProvider contextProviderParam) {
    this.provideContextProvider = new com_evgeny_goncharov_coreapi_providers_ContextProvider_provideContext(contextProviderParam);
    this.languageManagerImplProvider = LanguageManagerImpl_Factory.create(provideContextProvider);
    this.bindLanguageManagerProvider = DoubleCheck.provider((Provider) languageManagerImplProvider);
    this.themeManagerImplProvider = ThemeManagerImpl_Factory.create(provideContextProvider);
    this.bindThemeManagerProvider = DoubleCheck.provider((Provider) themeManagerImplProvider);
  }

  @Override
  public LanguageManager provideLanguageManager() {
    return bindLanguageManagerProvider.get();}

  @Override
  public ThemeManager provideThemeManager() {
    return bindThemeManagerProvider.get();}

  public static final class Builder {
    private ContextProvider contextProvider;

    private Builder() {
    }

    public Builder contextProvider(ContextProvider contextProvider) {
      this.contextProvider = Preconditions.checkNotNull(contextProvider);
      return this;
    }

    public ManagersComponent build() {
      Preconditions.checkBuilderRequirement(contextProvider, ContextProvider.class);
      return new DaggerManagersComponent(contextProvider);
    }
  }

  private static class com_evgeny_goncharov_coreapi_providers_ContextProvider_provideContext implements Provider<Context> {
    private final ContextProvider contextProvider;

    com_evgeny_goncharov_coreapi_providers_ContextProvider_provideContext(
        ContextProvider contextProvider) {
      this.contextProvider = contextProvider;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNull(contextProvider.provideContext(), "Cannot return null from a non-@Nullable component method");
    }
  }
}
